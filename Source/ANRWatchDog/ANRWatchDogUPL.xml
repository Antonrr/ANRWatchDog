<?xml version="1.0" encoding="utf-8"?>

<root xmlns:android="http://schemas.android.com/apk/res/android"
      xmlns:tools="http://schemas.android.com/tools">

	<!-- Copy Library directory & google-services.json -->
	<gradleCopies>
		<copyDir
			src="$S(PluginDir)/Android/"
			dst="$S(BuildDir)/gradle/app/src/main/java/com/github/anrwatchdog/" />
	</gradleCopies>
	
	<!--Enable AndroidX support-->
	<gradleProperties>
		<insert>
			android.useAndroidX = true
			android.enableJetifier = true
		</insert>
	</gradleProperties>

	<!-- Replace supportlib imports with AndroidX in engine source files -->
	<baseBuildGradleAdditions>
		<insert>
			allprojects
			{
				def mappings =
				[
					'android.arch.lifecycle.Lifecycle':                 'androidx.lifecycle.Lifecycle',
					'android.arch.lifecycle.LifecycleObserver':         'androidx.lifecycle.LifecycleObserver',
					'android.arch.lifecycle.OnLifecycleEvent':          'androidx.lifecycle.OnLifecycleEvent',
					'android.arch.lifecycle.ProcessLifecycleOwner':     'androidx.lifecycle.ProcessLifecycleOwner',
					'android.arch.lifecycle':                           'androidx.lifecycle',
					'android.support.annotation':                       'androidx.annotation',
					'android.support.v13.app.FragmentCompat':           'androidx.legacy.app.FragmentCompat',
					'android.support.v4.app.ActivityCompat':            'androidx.core.app.ActivityCompat',
					'android.support.v4.app.NotificationCompat':        'androidx.core.app.NotificationCompat',
					'android.support.v4.app.NotificationManagerCompat': 'androidx.core.app.NotificationManagerCompat',
					'android.support.v4.content.ContextCompat':         'androidx.core.content.ContextCompat',
					'android.support.v4.content.FileProvider':          'androidx.core.content.FileProvider',
				]

				beforeEvaluate { project ->
					project.rootProject.projectDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.java$/) { f ->
						mappings.each { entry ->
							if (f.getText('UTF-8').contains(entry.key)) {
								println "Updating ${entry.key} to ${entry.value} in file ${f}"
								ant.replace(file: f, token: entry.key, value: entry.value)
							}
						}
					}
				}
			}
		</insert>
	</baseBuildGradleAdditions>

	<!-- Gradle additions -->
	<buildGradleAdditions>
		<insert>
			android
			{
				compileOptions
				{
					targetCompatibility JavaVersion.VERSION_1_8
					sourceCompatibility JavaVersion.VERSION_1_8
				}
			}
		</insert>
	</buildGradleAdditions>

	<!-- ProGuard additions -->
	<proguardAdditions>
		<insert>
			-dontwarn com.github.**
			-keep class com.github.** { *; }
			-keep interface com.github.** { *; }
		</insert>
	</proguardAdditions>

	<!-- GameActivity.java additions -->
	<gameActivityImportAdditions>
        <insert>
	        import com.github.anrwatchdog.ANRError;
            import com.github.anrwatchdog.ANRWatchDog;
            import android.app.Application;
            import android.util.Log;
            import java.io.ByteArrayOutputStream;
            import java.io.IOException;
            import java.io.ObjectOutputStream;
            import androidx.annotation.NonNull;
		</insert>
	</gameActivityImportAdditions>

	<!-- GameActivity.java additions -->
	<gameActivityOnCreateAdditions>
		<insert>
            anrWatchDog.setANRListener(new ANRWatchDog.ANRListener() 
            { 
                @Override public void onAppNotResponding(@NonNull ANRError error) 
                {
                    Log.debug(ANR_TAG + "Application Not Responding!");
                    try 
                    {
                        new ObjectOutputStream(new ByteArrayOutputStream()).writeObject(error);
                    }
                    catch (IOException ex) 
                    {
                        throw new RuntimeException(ex);
                    }
                    Log.debug(ANR_TAG + "Error was successfully serialized");
                    throw error;
                }
            }) .setANRInterceptor(new ANRWatchDog.ANRInterceptor() 
            {
                @Override public long intercept(long duration) 
                {
                    long ret = 15000 - duration;
                     if (ret > 0)
                         Log.warn(ANR_TAG +  "Intercepted ANR that is too short (" + duration + " ms), postponing for " + ret + " ms.");
                    return ret;
                }
            }) ;
            anrWatchDog.start();
		</insert>
	</gameActivityOnCreateAdditions>

	<!-- GameActivity.java additions -->
	<gameActivityOnDestroyAdditions>
		<insert>
		</insert>
	</gameActivityOnDestroyAdditions>

	<!-- GameActivity.java additions -->
	<gameActivityClassAdditions>
		<insert>
            private static final String ANR_TAG = "ANR-Watchdog: ";
            private ANRWatchDog anrWatchDog = new ANRWatchDog(2000);
           
		    final ANRWatchDog.ANRListener silentListener = new ANRWatchDog.ANRListener() {
                @Override public void onAppNotResponding(@NonNull ANRError error) {
                    Log.error(ANR_TAG +  error);
                }
            };
            
            
		</insert>
	</gameActivityClassAdditions>

</root>
